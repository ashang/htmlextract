////////////////////////////////////////////////////////////////////////////
// Program: {{.Name}}
// Purpose: {{.Desc}}
// Authors: Antonio Sun (c) {{date "Y4"}}, All rights reserved
////////////////////////////////////////////////////////////////////////////

package {{$.PackageName}}

import (
	"github.com/mkideal/cli"
	clix "github.com/mkideal/cli/ext"

)

////////////////////////////////////////////////////////////////////////////
// Constant and data type/structure definitions

//==========================================================================
// {{.Name}}

type rootT struct {
	cli.Helper{{range .Options}}
	{{.Name}}	{{.Type}}	`cli:"{{.Flag}}" usage:"{{.Usage}}"{{if eq .Name "Self" }} json:"-" parser:"jsonfile"{{end}}{{if .Value}} dft:"{{.Value}}"{{end}}`{{end}}
}

var root = &cli.Command{
	Name: "{{.Name}}",
	Desc: "{{.Desc}}\nVersion " + version + " built on " + date,
{{if .Text}}	Text: "{{.Text}}"{{if .UsageLead}} +
		"\n\n{{.UsageLead}}"{{end}},{{end}}
{{if .Global}}	Global: {{.Global}},
{{end}}{{if .Self}}	Argv: func() interface{} {  t := new(rootT); t.Self = t; return t },
{{else}}	Argv: func() interface{} { return new(rootT) },
{{end}}	Fn:   {{.Name}},
{{if .NumOption}}
	NumOption:      {{.NumOption}},
{{end}}{{if .NumArg}}
	NumArg:      {{.NumArg}},
{{end}}{{if .CanSubRoute}}
	CanSubRoute:      {{.CanSubRoute}},
{{end}}}


// Template for main starts here
////////////////////////////////////////////////////////////////////////////
// Constant and data type/structure definitions

// The OptsT type defines all the configurable options from cli.
//  type OptsT struct { {{range .Options}}
//  	{{.Name}}	{{.Type}}{{end}}
//  	Verbose int
//  }

////////////////////////////////////////////////////////////////////////////
// Global variables definitions

//  var (
//          progname  = "{{.Name}}"
//          version   = "0.1.0"
//          date = "{{ date "I" }}"

//  	rootArgv *rootT
//  	// Opts store all the configurable options
//  	Opts OptsT
//  )

////////////////////////////////////////////////////////////////////////////
// Function definitions

// Function main
//  func main() {
//  	cli.SetUsageStyle(cli.ManualStyle) // up-down, for left-right, use NormalStyle
//  	//NOTE: You can set any writer implements io.Writer
//  	// default writer is os.Stdout
//  	if err := cli.Root(root,{{range $i, $cmd := .Command}}
//  		cli.Tree({{$cmd.Name}}Def){{if lt $i ($.Command | len | minus1)}},{{end}}{{end}}).Run(os.Args[1:]); err != nil {
//  		fmt.Fprintln(os.Stderr, err)
//  	}
//  	fmt.Println("")
//  }

// Template for main dispatcher starts here
//==========================================================================
// Main dispatcher

//  func {{.Name}}(ctx *cli.Context) error {
//  	ctx.JSON(ctx.RootArgv())
//  	ctx.JSON(ctx.Argv())
//  	fmt.Println()
   
//  	return nil
//  }

// Template for CLI handling starts here
{{range .Command}}
////////////////////////////////////////////////////////////////////////////
// {{.Name}}

//  func {{.Name}}CLI(ctx *cli.Context) error {
//  	rootArgv = ctx.RootArgv().(*rootT)
//  	argv := ctx.Argv().(*{{.Name}}T)
//  	fmt.Printf("[{{.Name}}]:\n  %+v\n  %+v\n  %v\n", rootArgv, argv, ctx.Args())
//  	{{range $.Options}}Opts.{{.Name}}, {{end}}Opts.Verbose =
//  		{{range $.Options}}rootArgv.{{.Name}}, {{end}}rootArgv.Verbose.Value()
//  	return nil
//  }

type {{.Name}}T struct {
{{range .Options}}
	{{.Name}}	{{.Type}}	`cli:"{{.Flag}}" usage:"{{.Usage}}"{{if eq .Name "Self" }} json:"-" parser:"jsonfile"{{end}}{{if .Value}} dft:"{{.Value}}"{{end}}`{{end}}
}

var {{.Name}}Def = &cli.Command{
	Name: "{{.Name}}",
	Desc: "{{.Desc}}",
{{if .Text}}	Text: "{{.Text}}"{{if .UsageLead}} +
		"\n\n{{.UsageLead}}"{{end}},{{end}}
{{if .Self}}	Argv: func() interface{} {  t := new({{.Name}}T); t.Self = t; return t },
{{else}}	Argv: func() interface{} { return new({{.Name}}T) },
{{end}}	Fn:   {{.Name}}CLI,
{{if .NumOption}}
	NumOption:      {{.NumOption}},
{{end}}{{if .NumArg}}
	NumArg:      {{.NumArg}},
	CanSubRoute: true,
{{end}}{{if .CanSubRoute}}
	CanSubRoute:      {{.CanSubRoute}},
{{end}}}
{{end}}
